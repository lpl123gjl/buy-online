{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n//配置全局axios的代码文件\nimport axios from 'axios';\nimport Element from 'element-ui';\nimport router from '@/router';\n//进行全局axios设置。需要定一个新的axios\nconst myaxios = axios.create({\n  timeout: 5000 //设置请求超时时间\n});\n//请求基础路径：\nmyaxios.defaults.baseURL = '/sys';\n//设置axios请求拦截器，就在axios发起请求之前执行\nmyaxios.interceptors.request.use(config => {\n  //登录之后，每次请求都必须携带 token请求头信息。\n  config.headers['token'] = JSON.parse(sessionStorage.getItem('TOKEN'));\n  return config;\n});\n// 对于axios所有的响应做处理。设置响应的拦截器。\n//响应的拦截器，就是每次请求回调 .then()方法之前执行。\nmyaxios.interceptors.response.use(response => {\n  let Result = response.data;\n  if (Result.code == 20000) {\n    //如果状态码是20000，表示请求成功，就正常执行请求回调.then()\n    return response;\n  } else {\n    //返回code不是20000，表示各种请求的失败码，直接进行错误提示：\n    Element.Message.error(Result.message ? Result.message : \"系统异常\", {\n      duration: 1000\n    });\n    return Promise.reject(response.data.message);\n  }\n}, error => {\n  //http: 200、404、500\n  //error是对http请求不同错误状态码做判断\n  if (error) {\n    error.message = error.response.data.message;\n  }\n  if (error.response.status == 401) {\n    //401：表示Java服务器上的API接口是有权限，当前登录用户不具备该权限，会报401。\n    router.push('/login');\n    return Promise.reject(error);\n  }\n  if (error.response.status == 404) {\n    //如果是404,就跳转至 访问不到资源的 错误显示页面\n    router.push('/notfound');\n    return Promise.reject(error);\n  }\n  if (error.response.status == 400) {\n    //状态码是400，就是请求Java服务器方法的方式错误。\n    error.message = '请求服务器端方法错误';\n  }\n  if (error.response.status == 500) {\n    error.message = '服务器端代码发生错误';\n  }\n  Element.Message.error(error.message, {\n    duration: 1000\n  });\n  return Promise.reject(error);\n});\n//将自定义 myaxios\nexport default myaxios;","map":{"version":3,"names":["axios","Element","router","myaxios","create","timeout","defaults","baseURL","interceptors","request","use","config","headers","JSON","parse","sessionStorage","getItem","response","Result","data","code","Message","error","message","duration","Promise","reject","status","push"],"sources":["D:/VueProjects/mall-online-system/src/api/index.js"],"sourcesContent":["//配置全局axios的代码文件\r\nimport axios from 'axios'\r\nimport Element from 'element-ui'\r\nimport router from '@/router'\r\n//进行全局axios设置。需要定一个新的axios\r\nconst myaxios = axios.create({\r\n    timeout: 5000, //设置请求超时时间\r\n});\r\n//请求基础路径：\r\nmyaxios.defaults.baseURL = '/sys';\r\n//设置axios请求拦截器，就在axios发起请求之前执行\r\nmyaxios.interceptors.request.use(config => {\r\n    //登录之后，每次请求都必须携带 token请求头信息。\r\n    config.headers['token'] = JSON.parse(sessionStorage.getItem('TOKEN'));\r\n    return config;\r\n})\r\n// 对于axios所有的响应做处理。设置响应的拦截器。\r\n//响应的拦截器，就是每次请求回调 .then()方法之前执行。\r\nmyaxios.interceptors.response.use(response => {\r\n    let Result = response.data;\r\n    if (Result.code == 20000) {\r\n        //如果状态码是20000，表示请求成功，就正常执行请求回调.then()\r\n        return response;\r\n    } else {\r\n        //返回code不是20000，表示各种请求的失败码，直接进行错误提示：\r\n        Element.Message.error(Result.message ? Result.message : \"系统异常\", {\r\n            duration: 1000,\r\n        });\r\n        return Promise.reject(response.data.message);\r\n    }\r\n   \r\n}, error => { //http: 200、404、500\r\n    //error是对http请求不同错误状态码做判断\r\n    if (error) {\r\n        error.message = error.response.data.message;\r\n    }\r\n    if (error.response.status == 401) {\r\n        //401：表示Java服务器上的API接口是有权限，当前登录用户不具备该权限，会报401。\r\n        router.push('/login');\r\n        return Promise.reject(error);\r\n    }\r\n    if (error.response.status == 404) {\r\n        //如果是404,就跳转至 访问不到资源的 错误显示页面\r\n        router.push('/notfound');\r\n        return Promise.reject(error);\r\n    }\r\n    if (error.response.status == 400) {\r\n        //状态码是400，就是请求Java服务器方法的方式错误。\r\n        error.message = '请求服务器端方法错误';\r\n    }\r\n    if (error.response.status == 500) {\r\n        error.message = '服务器端代码发生错误';\r\n    }\r\n    Element.Message.error(error.message, {\r\n        duration: 1000,\r\n    });\r\n    return Promise.reject(error);\r\n})\r\n//将自定义 myaxios\r\nexport default myaxios\r\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAM,YAAY;AAChC,OAAOC,MAAM,MAAM,UAAU;AAC7B;AACA,MAAMC,OAAO,GAAGH,KAAK,CAACI,MAAM,CAAC;EACzBC,OAAO,EAAE,IAAI,CAAE;AACnB,CAAC,CAAC;AACF;AACAF,OAAO,CAACG,QAAQ,CAACC,OAAO,GAAG,MAAM;AACjC;AACAJ,OAAO,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;EACvC;EACAA,MAAM,CAACC,OAAO,CAAC,OAAO,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACC,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;EACrE,OAAOL,MAAM;AACjB,CAAC,CAAC;AACF;AACA;AACAR,OAAO,CAACK,YAAY,CAACS,QAAQ,CAACP,GAAG,CAACO,QAAQ,IAAI;EAC1C,IAAIC,MAAM,GAAGD,QAAQ,CAACE,IAAI;EAC1B,IAAID,MAAM,CAACE,IAAI,IAAI,KAAK,EAAE;IACtB;IACA,OAAOH,QAAQ;EACnB,CAAC,MAAM;IACH;IACAhB,OAAO,CAACoB,OAAO,CAACC,KAAK,CAACJ,MAAM,CAACK,OAAO,GAAGL,MAAM,CAACK,OAAO,GAAG,MAAM,EAAE;MAC5DC,QAAQ,EAAE;IACd,CAAC,CAAC;IACF,OAAOC,OAAO,CAACC,MAAM,CAACT,QAAQ,CAACE,IAAI,CAACI,OAAO,CAAC;EAChD;AAEJ,CAAC,EAAED,KAAK,IAAI;EAAE;EACV;EACA,IAAIA,KAAK,EAAE;IACPA,KAAK,CAACC,OAAO,GAAGD,KAAK,CAACL,QAAQ,CAACE,IAAI,CAACI,OAAO;EAC/C;EACA,IAAID,KAAK,CAACL,QAAQ,CAACU,MAAM,IAAI,GAAG,EAAE;IAC9B;IACAzB,MAAM,CAAC0B,IAAI,CAAC,QAAQ,CAAC;IACrB,OAAOH,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;EAChC;EACA,IAAIA,KAAK,CAACL,QAAQ,CAACU,MAAM,IAAI,GAAG,EAAE;IAC9B;IACAzB,MAAM,CAAC0B,IAAI,CAAC,WAAW,CAAC;IACxB,OAAOH,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;EAChC;EACA,IAAIA,KAAK,CAACL,QAAQ,CAACU,MAAM,IAAI,GAAG,EAAE;IAC9B;IACAL,KAAK,CAACC,OAAO,GAAG,YAAY;EAChC;EACA,IAAID,KAAK,CAACL,QAAQ,CAACU,MAAM,IAAI,GAAG,EAAE;IAC9BL,KAAK,CAACC,OAAO,GAAG,YAAY;EAChC;EACAtB,OAAO,CAACoB,OAAO,CAACC,KAAK,CAACA,KAAK,CAACC,OAAO,EAAE;IACjCC,QAAQ,EAAE;EACd,CAAC,CAAC;EACF,OAAOC,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;AAChC,CAAC,CAAC;AACF;AACA,eAAenB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}