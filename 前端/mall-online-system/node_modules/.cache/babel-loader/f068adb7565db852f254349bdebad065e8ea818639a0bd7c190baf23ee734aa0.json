{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      //上传组件请求头信息：\n      headers: {\n        token: JSON.parse(sessionStorage.getItem('TOKEN'))\n      },\n      //分配角色表单对象\n      userRoleForm: {},\n      //分配角色树形控件数据\n      roleTreeData: [],\n      //分配商家表单对象\n      userBusinessForm: {},\n      //分配商家树形控件数据\n      userBusinessTreeData: [],\n      //新建用户表单验证规则\n      userRules: {\n        username: [{\n          required: true,\n          message: '请输入用户名',\n          trigger: 'blur'\n        }],\n        email: [{\n          required: true,\n          message: '请输入电子邮箱',\n          trigger: 'blur'\n        }],\n        tel: [{\n          required: true,\n          message: '请输入手机号',\n          trigger: 'blur'\n        }]\n      },\n      //用户对话框表单\n      userForm: {\n        id: 0,\n        avatar: '',\n        //头像\n        username: '',\n        //用户名\n        password: '',\n        //密码\n        email: '',\n        //邮件\n        tel: '',\n        //电话\n        statu: 1 //状态\n      },\n      tableData: [],\n      //用户表格显示数组\n      deleteAllBtnStu: true,\n      //是否禁用用户的批量删除\n      dialogFormVisible: false,\n      //是否显示新建用户对话框\n      dialogRoleFormVisible: false,\n      //是否显示分配角色对话框\n      dialogBusinessFormVisible: false,\n      //是否显示分配商家对话框\n      //搜索工具栏对象\n      searchForm: {\n        name: ''\n      },\n      //分页相关的参数\n      current: 1,\n      //当前页码，默认是显示第一页\n      size: 5,\n      //一页显示记录数\n      total: 0,\n      //总共的记录数\n\n      selection: [],\n      //存储表格中所有复选框 选中用户对象\n      defaultProps: {\n        children: 'children',\n        label: 'name'\n      }\n    };\n  },\n  created() {\n    this.loadUserList();\n    this.$axios.get('/role/tree').then(response => {\n      this.roleTreeData = response.data.resultdata;\n    }).catch(e => {\n      console.log(e);\n    });\n\n    //加载分配商家tree\n    this.loadBusinessTree();\n  },\n  methods: {\n    //分配当前用户的角色信息\n    editRoleMethod(id) {\n      //使用用户id 查询该用户的信息以及该用户所具有角色信息\n      this.$axios.get('/user/info/' + id).then(response => {\n        let user = response.data.resultdata;\n        this.userRoleForm = user;\n        //获得当前用户 具备所有的角色id\n        let roleIds = [];\n        user.roles.forEach(r => {\n          roleIds.push(r.id);\n        });\n\n        //在Tree控件中设置当前用户具备的角色\n        this.$refs.roleTree.setCheckedKeys(roleIds);\n      }).catch(e => {\n        console.log(e);\n      });\n      this.dialogRoleFormVisible = true; //显示分配角色对话框\n    },\n    //保存分配商家\n    submitBusinessForm(formName) {\n      //获得tree控件中分配的角色id\n      let businessIds = this.$refs.userBusinessTree.getCheckedKeys();\n\n      //提交服务器端保存：\n      this.$axios.post('/user/business/' + this.userBusinessForm.id, businessIds).then(response => {\n        this.$message({\n          showClose: true,\n          message: response.data.resultdata,\n          type: 'success',\n          duration: 1000\n        });\n        this.loadUserList();\n        this.loadBusinessTree();\n        this.dialogBusinessFormVisible = false;\n      }).catch(e => {\n        console.log(e);\n      });\n    },\n    loadBusinessTree() {\n      this.$axios.get('/business/tree').then(response => {\n        this.userBusinessTreeData = this.formatTreeData(response.data.resultdata);\n      }).catch(e => {\n        console.log(e);\n      });\n    },\n    //分配当前用户的商家信息\n    editBusinessMethod(id) {\n      this.$axios.get('/user/info/' + id).then(response => {\n        let user = response.data.resultdata;\n        this.userBusinessForm = user;\n      }).catch(e => {\n        console.log(e);\n      });\n      this.dialogBusinessFormVisible = true; //显示分配角色对话框\n    },\n    formatTreeData(businessIdList) {\n      return businessIdList.map(id => {\n        return {\n          id: id,\n          name: id\n        };\n      });\n    },\n    //保存分配角色\n    submitRoleForm(formName) {\n      //获得tree控件中分配的角色id\n      let roleIds = this.$refs.roleTree.getCheckedKeys();\n\n      //提交服务器端保存：\n      this.$axios.post('/user/role/' + this.userRoleForm.id, roleIds).then(response => {\n        this.$message({\n          showClose: true,\n          message: response.data.resultdata,\n          type: 'success',\n          duration: 1000\n        });\n        this.loadUserList();\n        this.dialogRoleFormVisible = false;\n      }).catch(e => {\n        console.log(e);\n      });\n    },\n    //重置密码：\n    resetPassword(id, username) {\n      this.$confirm('重置用户【' + username + '】的密码，是否继续执行该操作', '重置账户密码提示', {\n        confirmButtonText: '执行',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        //请求服务器端，重置密码\n        this.$axios.post('/user/repass/' + id).then(response => {\n          this.$message({\n            showClose: true,\n            message: response.data.resultdata,\n            type: 'success',\n            duration: 1000\n          });\n        }).catch(e => {\n          console.log(e);\n        });\n      }).catch(() => {});\n    },\n    //编辑用户的方法\n    editUser(id) {\n      this.$axios.get('/user/info/' + id).then(response => {\n        let user = response.data.resultdata;\n        this.userForm = user;\n        this.dialogFormVisible = true;\n        //TODO: 拿到用户权限，需要设置分配角色 树形控件\n      });\n    },\n    //重置对话框\n    resetUserForm(formName) {\n      this.userForm = {\n        id: 0,\n        avatar: '',\n        username: '',\n        password: '',\n        email: '',\n        tel: '',\n        statu: 1\n      };\n      this.$refs[formName].resetFields();\n    },\n    //提交新建用户或 编辑用户的表单\n    submitUserForm(formName) {\n      this.$refs[formName].validate(valid => {\n        if (valid) {\n          this.$axios.post('/user/' + (this.userForm.id != 0 ? 'update' : 'save'), this.userForm).then(response => {\n            this.$message({\n              showClose: true,\n              message: response.data.resultdata,\n              type: 'success',\n              duration: 1000\n            });\n            //添加用户成功，重新加载分页表格数据\n            this.loadUserList();\n            //重置角色对话框中的表单\n            this.resetUserForm(formName);\n            this.dialogFormVisible = false;\n          }).catch(e => {\n            console.log(e);\n          });\n        } else {\n          return false;\n        }\n      });\n    },\n    //上传用户头像成功以后回调函数\n    handleAvatarSuccess(response, file) {\n      console.log('头像', response.resultdata);\n      //上传成功，从回调的response参数中 获得上传图片在OSS服务器上地址。\n      //这个response和axios中使用response对象是不一样的。这个response不需要.data。直接返回的就是 result数据。\n      this.userForm.avatar = response.resultdata;\n      this.$forceUpdate(); //强制刷新\n    },\n    handleSizeChange(val) {\n      console.log(`每页 ${val} 条`);\n      this.size = val;\n      this.loadUserList(); //一页显示的记录数改变，重新加载分页和表格数据。\n    },\n    handleCurrentChange(val) {\n      console.log(`当前页: ${val}`);\n      this.current = val;\n      this.loadUserList(); //当前页面改变，重新加载页面的数据。\n    },\n    //加载 分页用户表格数据\n    loadUserList() {\n      this.$axios.get('/user/list', {\n        params: {\n          name: this.searchForm.name,\n          //参数，就是模糊查询条件\n          current: this.current,\n          size: this.size\n        }\n      }).then(response => {\n        this.tableData = response.data.resultdata.records; //分页的表格数据\n        this.current = response.data.resultdata.current;\n        this.size = response.data.resultdata.size;\n        this.total = response.data.resultdata.total;\n      }).catch(e => {\n        console.log(e);\n      });\n    },\n    //删除用户的方法\n    deleteUser(id) {\n      var userIds = []; //存储所有要删除的用户id \n\n      //单个删除 参数id是有值的。而批量删除是从selection数组取删除的用户id\n      id ? userIds.push(id) : this.selection.forEach(u => {\n        userIds.push(u.id);\n      });\n      this.$axios.post('/user/delete', userIds).then(response => {\n        this.$message({\n          showClose: true,\n          message: response.data.resultdata,\n          type: 'success',\n          duration: 1000\n        });\n        //删除成功，重新加载角色的分页表格数据\n        this.loadUserList();\n      });\n    },\n    //用户表格数据的复选框事件方法\n    handleSelectionChange(userArr) {\n      this.selection = userArr;\n      if (this.selection) {\n        this.deleteAllBtnStu = this.selection.length === 0;\n      }\n    },\n    close() {\n      this.dialogRoleFormVisible = false;\n    },\n    close2() {\n      this.dialogBusinessFormVisible = false;\n    }\n  }\n};","map":{"version":3,"names":["data","headers","token","JSON","parse","sessionStorage","getItem","userRoleForm","roleTreeData","userBusinessForm","userBusinessTreeData","userRules","username","required","message","trigger","email","tel","userForm","id","avatar","password","statu","tableData","deleteAllBtnStu","dialogFormVisible","dialogRoleFormVisible","dialogBusinessFormVisible","searchForm","name","current","size","total","selection","defaultProps","children","label","created","loadUserList","$axios","get","then","response","resultdata","catch","e","console","log","loadBusinessTree","methods","editRoleMethod","user","roleIds","roles","forEach","r","push","$refs","roleTree","setCheckedKeys","submitBusinessForm","formName","businessIds","userBusinessTree","getCheckedKeys","post","$message","showClose","type","duration","formatTreeData","editBusinessMethod","businessIdList","map","submitRoleForm","resetPassword","$confirm","confirmButtonText","cancelButtonText","editUser","resetUserForm","resetFields","submitUserForm","validate","valid","handleAvatarSuccess","file","$forceUpdate","handleSizeChange","val","handleCurrentChange","params","records","deleteUser","userIds","u","handleSelectionChange","userArr","length","close","close2"],"sources":["src/views/system/User.vue"],"sourcesContent":["<template>\r\n  <div>\r\n      <!-- 用户管理 工具栏 -->\r\n      <el-form ref=\"searchForm\" :model=\"searchForm\" :inline=\"true\">\r\n          <el-form-item>\r\n              <el-input placeholder=\"请输入要搜索的用户名称\" v-model=\"searchForm.name\" clearable /> \r\n          </el-form-item>    \r\n          <el-form-item>\r\n              <el-button @click=\"loadUserList()\">搜索</el-button>\r\n              <el-button type=\"primary\" @click=\"dialogFormVisible=true\">新建</el-button> \r\n              <el-popconfirm title=\"确认要删除这些用户吗?\" @confirm=\"deleteUser()\">\r\n                  <el-button v-if=\"hasAuth('sys:user:delete')\" type=\"danger\" slot=\"reference\" :disabled=\"deleteAllBtnStu\">批量删除</el-button>\r\n              </el-popconfirm>\r\n          </el-form-item>\r\n      </el-form>\r\n  \r\n      <!-- 用户数据表格显示 -->\r\n      <el-table :data=\"tableData\" border style=\"width:100%; margin-bottom:20px;\" \r\n          :cell-style=\"{padding:'4px'}\" @selection-change=\"handleSelectionChange\">\r\n          <el-table-column type=\"selection\" width=\"50\"></el-table-column>\r\n          <el-table-column label=\"头像\" width=\"58\">\r\n              <template slot-scope=\"scope\">\r\n                  <!-- <img style=\"width:40px; height:40px; background-size: cover;\" :src=\"scope.row.avatar\"/> -->\r\n                  <el-avatar  :src=\"scope.row.avatar\"></el-avatar>\r\n              </template>\r\n          </el-table-column>\r\n          <el-table-column prop=\"username\" label=\"用户名\" width=\"120\" />\r\n          <el-table-column  label=\"角色\" width=\"180\" >\r\n              <template slot-scope=\"scope\">\r\n                  <el-tag type=\"warning\" size=\"small\" v-for=\"(item,index) in scope.row.roles\" :key=\"index\" style=\"margin-left:2px;\">\r\n                  {{ item.name }}\r\n                  </el-tag>\r\n              </template>\r\n          </el-table-column>\r\n          <el-table-column prop=\"email\" label=\"邮箱\" width=\"180\" />\r\n          <el-table-column prop=\"tel\" label=\"电话\" width=\"140\" />\r\n          <el-table-column prop=\"statu\" label=\"用户状态\" width=\"120\">\r\n              <template slot-scope=\"scope\">\r\n                  <el-tag v-if=\"scope.row.statu===1\" type=\"success\" size=\"mini\">正常</el-tag>\r\n                  <el-tag v-else-if=\"scope.row.statu===0\" type=\"danger\" size=\"mini\">禁用</el-tag>\r\n              </template>    \r\n          </el-table-column>\r\n          <el-table-column label=\"创建时间\">\r\n              <template slot-scope=\"scope\">\r\n                  {{ scope.row.created | fmtDate }}\r\n              </template>\r\n          </el-table-column>\r\n          <el-table-column fixed=\"right\" label=\"操作\">\r\n                  <template slot-scope=\"scope\">\r\n                      <el-button type=\"text\" size=\"small\" @click=\"editUser(scope.row.id)\">编辑</el-button>\r\n                      <el-divider direction=\"vertical\" />\r\n                      <el-button type=\"text\" size=\"small\" @click=\"editRoleMethod(scope.row.id)\">分配角色</el-button>\r\n                      <el-divider direction=\"vertical\" />\r\n                      <el-button type=\"text\" size=\"small\" @click=\"editBusinessMethod(scope.row.id)\">分配商家</el-button>\r\n                      <el-divider direction=\"vertical\" />\r\n                      <el-button type=\"text\" size=\"small\" v-if=\"hasAuth('sys:user:repass')\" @click=\"resetPassword(scope.row.id,scope.row.username)\">重置密码</el-button>\r\n                      <el-divider direction=\"vertical\" />\r\n                      <el-popconfirm title=\"确定要删除该用户数据吗？\" @confirm=\"deleteUser(scope.row.id)\">\r\n                          <el-button slot=\"reference\" type=\"text\" size=\"small\" v-if=\"hasAuth('sys:user:delete')\">删除</el-button>\r\n                      </el-popconfirm>\r\n                  </template>\r\n              </el-table-column>\r\n      </el-table>\r\n      <el-pagination\r\n          @size-change=\"handleSizeChange\"\r\n          @current-change=\"handleCurrentChange\"\r\n          :current-page=\"current\"\r\n          :page-sizes=\"[5, 10, 15, 20]\"\r\n          :page-size=\"size\"\r\n          layout=\"total, sizes, prev, pager, next, jumper\"\r\n          :total=\"total\"\r\n          style=\"display:flex;justify-content:center\">\r\n      </el-pagination>\r\n  \r\n      <!-- 新建和编辑用户的对话框 -->\r\n      <el-dialog title=\"编辑用户\" :visible.sync=\"dialogFormVisible\" width=\"550px\" @closed=\"resetUserForm('userForm')\">\r\n          <el-form ref=\"userForm\" :model=\"userForm\" label-width=\"100px\" :rules=\"userRules\">\r\n              <el-form-item lang=\"用户头像\" label-width=\"100px\">\r\n                  <!-- 因为上传图片不是使用 axios，所以不会自动添加基础路径 /sys，需要自己添加 -->\r\n                  <!-- 因为上传组件不是使用axios,所以需要手动设置请求头携带token :headers=\"headers\" -->\r\n                  <el-upload class=\"avatar-uploader\" action=\"/sys/api/upload\" \r\n                  :show-file-list=\"false\" :on-success=\"handleAvatarSuccess\" :headers=\"headers\">\r\n                  <img v-if=\"userForm.avatar\" :src=\"userForm.avatar\" class=\"avatar\">\r\n                  <i v-else class=\"el-icon-plus avatar-uploader-icon\"></i>\r\n                  </el-upload>\r\n              </el-form-item>\r\n              <el-form-item label=\"用户名\" label-width=\"100px\" prop=\"username\">\r\n                  <el-input v-model=\"userForm.username\" />\r\n              </el-form-item>\r\n              <el-form-item label=\"密码\" label-width=\"100px\">\r\n                  <el-input v-model=\"userForm.password\" />\r\n              </el-form-item>\r\n              <el-form-item label=\"邮件\" label-width=\"100px\" prop=\"email\">\r\n                  <el-input v-model=\"userForm.email\" />\r\n              </el-form-item>\r\n              <el-form-item label=\"手机号\" label-width=\"100px\" prop=\"tel\">\r\n                  <el-input v-model=\"userForm.tel\" />\r\n              </el-form-item>\r\n              <el-form-item label=\"用户状态\" label-width=\"100px\" prop=\"statu\">\r\n                  <el-radio-group v-model=\"userForm.statu\">\r\n                      <el-radio :label=\"0\">禁用</el-radio>\r\n                      <el-radio :label=\"1\">正常</el-radio>\r\n                  </el-radio-group>\r\n              </el-form-item>\r\n              <el-form-item>\r\n                  <el-button type=\"primary\" @click=\"submitUserForm('userForm')\">保存用户</el-button>\r\n                  <el-button @click=\"resetUserForm('userForm')\">重置</el-button>\r\n              </el-form-item>\r\n          </el-form>\r\n      </el-dialog>\r\n  \r\n      <!-- 分配角色对话框  -->\r\n      <el-dialog title=\"分配角色\" :visible.sync=\"dialogRoleFormVisible\" width=\"550px\" >\r\n          <el-form :model=\"userRoleForm\" ref=\"userRoleForm\">\r\n              <el-tree show-checkbox :data=\"roleTreeData\" ref=\"roleTree\" :default-expand-all=\"true\" node-key=\"id\"\r\n              :props=\"defaultProps\" >\r\n              </el-tree>\r\n          </el-form>\r\n          <div slot=\"footer\" class=\"dialog-footer\">\r\n                  <el-button @click=\"close\">关闭</el-button>\r\n                  <el-button type=\"primary\" @click=\"submitRoleForm('userRoleForm')\">保存分配角色</el-button>\r\n          </div>\r\n      </el-dialog>\r\n      <!-- 分配商家对话框  -->\r\n      <el-dialog title=\"分配商家\" :visible.sync=\"dialogBusinessFormVisible\" width=\"350px\" >\r\n          <el-form :model=\"userBusinessForm\" ref=\"userBusinessForm\">\r\n              <el-tree show-checkbox :data=\"userBusinessTreeData\" ref=\"userBusinessTree\" :default-expand-all=\"true\" node-key=\"id\"\r\n              :props=\"defaultProps\" >\r\n              </el-tree>\r\n          </el-form>\r\n          <div slot=\"footer\" class=\"dialog-footer\">\r\n                  <el-button @click=\"close2\">关闭</el-button>\r\n                  <el-button type=\"primary\" @click=\"submitBusinessForm('userBusinessForm')\">保存分配商家</el-button>\r\n          </div>\r\n      </el-dialog>\r\n  </div>\r\n  </template>\r\n   <script>\r\n   export default{\r\n       data(){\r\n           return{\r\n              //上传组件请求头信息：\r\n              headers:{\r\n                  token:JSON.parse(sessionStorage.getItem('TOKEN')) \r\n              },\r\n  \r\n              //分配角色表单对象\r\n              userRoleForm:{},\r\n              //分配角色树形控件数据\r\n              roleTreeData:[],\r\n\r\n              //分配商家表单对象\r\n              userBusinessForm:{},\r\n              //分配商家树形控件数据\r\n              userBusinessTreeData:[],\r\n\r\n              //新建用户表单验证规则\r\n              userRules:{\r\n                  username:[ { required: true, message: '请输入用户名', trigger: 'blur' } ],\r\n                  email:[ { required: true, message: '请输入电子邮箱', trigger: 'blur' } ],\r\n                  tel:[ { required: true, message: '请输入手机号', trigger: 'blur' } ],\r\n              },\r\n  \r\n              //用户对话框表单\r\n              userForm:{\r\n                  id:0,  \r\n                  avatar:'',   //头像\r\n                  username:'', //用户名\r\n                  password:'',  //密码\r\n                  email:'',   //邮件\r\n                  tel:'', //电话\r\n                  statu:1,  //状态\r\n              },\r\n  \r\n              tableData:[],   //用户表格显示数组\r\n              deleteAllBtnStu:true, //是否禁用用户的批量删除\r\n              dialogFormVisible:false,  //是否显示新建用户对话框\r\n              dialogRoleFormVisible:false,  //是否显示分配角色对话框\r\n              dialogBusinessFormVisible:false,  //是否显示分配商家对话框\r\n              //搜索工具栏对象\r\n              searchForm:{\r\n                  name:''\r\n              },\r\n              //分页相关的参数\r\n              current:1, //当前页码，默认是显示第一页\r\n              size:5, //一页显示记录数\r\n              total:0, //总共的记录数\r\n  \r\n              selection:[],  //存储表格中所有复选框 选中用户对象\r\n              defaultProps:{\r\n                  children:'children',\r\n                  label:'name',\r\n              },\r\n           }\r\n       },\r\n       created(){\r\n          this.loadUserList();\r\n          this.$axios.get('/role/tree').then(response=>{\r\n              this.roleTreeData = response.data.resultdata\r\n          }).catch(e=>{ console.log(e); })\r\n\r\n          //加载分配商家tree\r\n          this.loadBusinessTree()\r\n          \r\n       },\r\n       \r\n       methods:{\r\n          //分配当前用户的角色信息\r\n          editRoleMethod(id){\r\n              //使用用户id 查询该用户的信息以及该用户所具有角色信息\r\n              this.$axios.get('/user/info/'+id).then(response=>{\r\n                  let user = response.data.resultdata;\r\n                  this.userRoleForm = user;\r\n                  //获得当前用户 具备所有的角色id\r\n                  let roleIds = [];\r\n                  user.roles.forEach( r =>{\r\n                      roleIds.push(r.id);\r\n                  });\r\n  \r\n  \r\n                  //在Tree控件中设置当前用户具备的角色\r\n                  this.$refs.roleTree.setCheckedKeys(roleIds);\r\n  \r\n              }).catch(e=>{ console.log(e); });\r\n              this.dialogRoleFormVisible=true;  //显示分配角色对话框\r\n          },\r\n          //保存分配商家\r\n          submitBusinessForm(formName){\r\n              //获得tree控件中分配的角色id\r\n              let businessIds = this.$refs.userBusinessTree.getCheckedKeys();\r\n  \r\n              //提交服务器端保存：\r\n              this.$axios.post('/user/business/'+this.userBusinessForm.id,businessIds).then(response=>{\r\n                  this.$message({\r\n                              showClose: true,\r\n                              message: response.data.resultdata,\r\n                              type: 'success',\r\n                              duration:1000,\r\n                  });\r\n                  this.loadUserList();\r\n                  this.loadBusinessTree()\r\n                  this.dialogBusinessFormVisible = false;\r\n              }).catch(e=>{ console.log(e); });\r\n          },\r\n          loadBusinessTree(){\r\n            this.$axios.get('/business/tree').then(response=>{\r\n              this.userBusinessTreeData = this.formatTreeData(response.data.resultdata);\r\n          }).catch(e=>{ console.log(e); })\r\n          },\r\n          //分配当前用户的商家信息\r\n          editBusinessMethod(id){\r\n            this.$axios.get('/user/info/'+id).then(response=>{\r\n                  let user = response.data.resultdata;\r\n                  this.userBusinessForm = user;\r\n              }).catch(e=>{ console.log(e); });\r\n              this.dialogBusinessFormVisible=true;  //显示分配角色对话框\r\n          },\r\n          formatTreeData(businessIdList) {\r\n            return businessIdList.map(id => {\r\n                return {\r\n                id: id,\r\n                name: id\r\n                };\r\n            });\r\n            },\r\n          //保存分配角色\r\n          submitRoleForm(formName){\r\n              //获得tree控件中分配的角色id\r\n              let roleIds = this.$refs.roleTree.getCheckedKeys();\r\n  \r\n              //提交服务器端保存：\r\n              this.$axios.post('/user/role/'+this.userRoleForm.id,roleIds).then(response=>{\r\n                  this.$message({\r\n                              showClose: true,\r\n                              message: response.data.resultdata,\r\n                              type: 'success',\r\n                              duration:1000,\r\n                  });\r\n                  this.loadUserList();\r\n                  this.dialogRoleFormVisible = false;\r\n              }).catch(e=>{ console.log(e); });\r\n          },\r\n\r\n          //重置密码：\r\n          resetPassword(id,username){\r\n              this.$confirm('重置用户【'+username+'】的密码，是否继续执行该操作','重置账户密码提示',{\r\n                  confirmButtonText:'执行',\r\n                  cancelButtonText:'取消',\r\n                  type:'warning'\r\n              }).then(()=>{\r\n                  //请求服务器端，重置密码\r\n                  this.$axios.post('/user/repass/'+id).then(response=>{\r\n                      this.$message({\r\n                              showClose: true,\r\n                              message: response.data.resultdata,\r\n                              type: 'success',\r\n                              duration:1000,\r\n                      });\r\n                  }).catch(e=>{ console.log(e); })\r\n  \r\n              }).catch(()=>{});\r\n          },\r\n          //编辑用户的方法\r\n          editUser(id){\r\n              this.$axios.get('/user/info/'+id).then(response=>{\r\n                  let user = response.data.resultdata;\r\n                  this.userForm = user;\r\n                  this.dialogFormVisible=true;\r\n                  //TODO: 拿到用户权限，需要设置分配角色 树形控件\r\n              })\r\n          },\r\n          //重置对话框\r\n          resetUserForm(formName){\r\n              this.userForm={\r\n                  id:0,  \r\n                  avatar:'',   \r\n                  username:'', \r\n                  password:'',  \r\n                  email:'',   \r\n                  tel:'', \r\n                  statu:1,  \r\n              };\r\n              this.$refs[formName].resetFields();\r\n          },\r\n          //提交新建用户或 编辑用户的表单\r\n          submitUserForm(formName){\r\n              this.$refs[formName].validate((valid)=>{\r\n                  if(valid){\r\n                      this.$axios.post('/user/'+(this.userForm.id!=0?'update':'save'),this.userForm).then(response=>{\r\n                          this.$message({\r\n                              showClose: true,\r\n                              message: response.data.resultdata,\r\n                              type: 'success',\r\n                              duration:1000,\r\n                          });\r\n                          //添加用户成功，重新加载分页表格数据\r\n                          this.loadUserList();\r\n                          //重置角色对话框中的表单\r\n                          this.resetUserForm(formName);\r\n                          this.dialogFormVisible=false;\r\n                      }).catch(e=>{ console.log(e)});\r\n                  }else{\r\n                      return false;\r\n                  }\r\n              })\r\n          },\r\n          //上传用户头像成功以后回调函数\r\n          handleAvatarSuccess(response,file){\r\n              console.log('头像',response.resultdata);\r\n              //上传成功，从回调的response参数中 获得上传图片在OSS服务器上地址。\r\n              //这个response和axios中使用response对象是不一样的。这个response不需要.data。直接返回的就是 result数据。\r\n              this.userForm.avatar = response.resultdata\r\n              this.$forceUpdate()  //强制刷新\r\n          },\r\n          handleSizeChange(val){\r\n              console.log(`每页 ${val} 条`);\r\n              this.size = val;\r\n              this.loadUserList(); //一页显示的记录数改变，重新加载分页和表格数据。\r\n          },\r\n          handleCurrentChange(val){\r\n              console.log(`当前页: ${val}`);\r\n              this.current = val;\r\n              this.loadUserList();  //当前页面改变，重新加载页面的数据。\r\n          },\r\n          //加载 分页用户表格数据\r\n          loadUserList(){\r\n              this.$axios.get('/user/list',{\r\n                  params:{\r\n                      name:this.searchForm.name,  //参数，就是模糊查询条件\r\n                      current:this.current,\r\n                      size:this.size,\r\n                  }\r\n              }).then(response=>{\r\n                  this.tableData = response.data.resultdata.records  //分页的表格数据\r\n                  this.current = response.data.resultdata.current \r\n                  this.size = response.data.resultdata.size\r\n                  this.total = response.data.resultdata.total\r\n              }).catch(e=>{ console.log(e); });\r\n          },\r\n          //删除用户的方法\r\n          deleteUser(id){\r\n              var userIds =[];  //存储所有要删除的用户id \r\n  \r\n              //单个删除 参数id是有值的。而批量删除是从selection数组取删除的用户id\r\n              id?userIds.push(id):this.selection.forEach( u=>{ userIds.push(u.id) } );\r\n  \r\n              this.$axios.post('/user/delete',userIds).then(response=>{\r\n                  this.$message({\r\n                      showClose: true,\r\n                      message: response.data.resultdata,\r\n                      type: 'success',\r\n                      duration:1000,\r\n                  });\r\n                  //删除成功，重新加载角色的分页表格数据\r\n                  this.loadUserList();\r\n              })  \r\n          },\r\n          //用户表格数据的复选框事件方法\r\n          handleSelectionChange(userArr){\r\n              this.selection = userArr;\r\n              if(this.selection){\r\n                  this.deleteAllBtnStu = (this.selection.length === 0);\r\n              }\r\n          },\r\n          close(){\r\n            this.dialogRoleFormVisible = false;\r\n          },\r\n          close2(){\r\n            this.dialogBusinessFormVisible = false;\r\n          }\r\n       }\r\n   }\r\n   </script>\r\n   <style scoped>\r\n       .avatar-uploader .el-upload {\r\n          border: 1px dashed #d9d9d9;\r\n          border-radius: 6px;\r\n          cursor: pointer;\r\n          position: relative;\r\n          overflow: hidden;\r\n      }\r\n      .avatar-uploader .el-upload:hover {\r\n          border-color: #409EFF;\r\n      }\r\n      .avatar-uploader-icon {\r\n          font-size: 28px;\r\n          color: #8c939d;\r\n          width: 178px;\r\n          height: 178px;\r\n          line-height: 178px;\r\n          text-align: center;\r\n      }\r\n      .avatar {\r\n          width: 178px;\r\n          height: 178px;\r\n          display: block;\r\n          \r\n      }\r\n   </style>\r\n     "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}